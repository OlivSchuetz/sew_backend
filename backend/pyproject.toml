[project]
name = "app"
version = "0.1.0"
description = ""
requires-python = ">=3.10,<3.13"
dependencies = [
    #Core Framework 
    "fastapi[standard]<1.0.0,>=0.114.2",
    "pydantic>2.0",
    "pydantic-settings<3.0.0,>=2.2.1",
    #Request Handling & Multipart Support
    "python-multipart<1.0.0,>=0.0.7",
    #Security & Authentication
    "passlib[bcrypt]<2.0.0,>=1.7.4",
    "bcrypt==3.2.0",
    "pyjwt<3.0.0,>=2.8.0",
    #Database & ORM
    "sqlalchemy>=2.0.14",
    "psycopg[binary]<4.0.0,>=3.1.13",
    "alembic<2.0.0,>=1.12.1",
    #Monitoring & Error Tracking
    "sentry-sdk[fastapi]<2.0.0,>=1.40.6",
    #Resilience & Retry Logic, Pre-start
    "tenacity<9.0.0,>=8.2.3",
    #Coverage, Test
    "coverage==7.10.7",
    "pytest==8.4.2",
    "pytest-cov>=4.1.0",
    "pytest-asyncio>=0.21.0",
    # Linter script
    "mypy",
    "ruff==0.13.3",
]

# Ruff Configuration (Linter + Formatter)
[tool.ruff]
line-length = 88
target-version = "py310"
exclude = [
    ".git",
    "__pycache__",
    "venv",
    ".venv",
    "alembic/versions",
    "build",
    "dist",
]

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
]
ignore = [
    "E501",  # line too long (handled by formatter)
    "B008",  # do not perform function calls in argument defaults
    "W191",  # indentation contains tabs
]

[tool.ruff.lint.isort]
known-first-party = ["app"]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"

# MyPy Configuration (Type Checking)
[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
follow_imports = "normal"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false

# Pytest Configuration
[tool.pytest.ini_options]
testpaths = ["tests"]
pythonpath = ["app"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "-v",
    "--strict-markers",
    "--cov=app",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
markers = [
    "slow: marks tests as slow",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

# Coverage Configuration
[tool.coverage.run]
source = ["app"]
omit = [
    "*/tests/*",
    "*/alembic/*",
    "*/__pycache__/*",
    "*/venv/*",
]

[tool.coverage.report]
precision = 2
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "@abstractmethod",
]